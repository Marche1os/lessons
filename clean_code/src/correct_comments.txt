1) Комментарий TODO
Добавлен todo комментарий к устаревшим методам api и ссылкой на задачу по переводу метода на новую версию
Пример:

//TODO migrate to new method api [link_to_task]
AuthToken auth();

2) Информативный комментарий.
Когда даты форматируются различными способами, все же будет полезно наглядно показать выходной формат. Примеры:

// 15 января, 2023
private SimpleDateFormat formatDayInYearFullMonthYear = new SimpleDateFormat("d MMMM, yyyy");

//15 янв
private SimpleDateFormat formatDayInYearShortMonth = new SimpleDateFormat("d\u00A0 MMM");

// 15 января
private SimpleDateFormat formatDayInYearShortMonth = new SimpleDateFormat("d\u00A0MMMM");


3) Информативный комментарий. Добавил ссылку на описание алгоритма "Фильтр Блума".

//Описание алгоритма в параграфе Bloom Filters https://www.chrislaux.com/hashtable
public class BloomFilter {...}


4) Информативный комментарий к вызову метода api на его контракт.

@GET("profile")
// see documentation https://www.swagger.io/*
Response<ProfileDto> getProfile();


5) Пример предупреждающего комментария.

/*
    В этот класс нельзя добавлять новые зависимости, так как это увеличивает время сборки.
    Постепенно выпиливается.
*/
public class Dependencies {...}


6) Прояснение возвращаемого значения, после вызова функции open gl.

// По контракту в метод GLES30.glGerShariv передается массив единичного размера,
// в который добавляется результат выполнения функции (0 - ошибка, 1 - успех)
int[] getShaderResult = new int[1];
GLES30.glGerShariv(shaderId, getShaderResult);
if (getShaderResult[0] == 0) {
    // обработка ошибки
}


7) Усиление. Добавил комментарий о важности очищение ресурсов, остановки запросов, когда пользователь перестает взаимодействовать с экраном.

//Важно не забывать очищать ссылки, останавливать выполнение запросов.
void onStop() {
    confirmButton.setOnClickListener = null;
    surfaceTexture = null;
    stopLoadingRequests();
}


8) Информативный и усилительный комментарий. Добавил описание работы метода.

//Запускает процесс автоскролла списка. Пролистывает элемент каждые 10 секунд, если пользователь не взаимодействовал со списком.
// Обязательно вызовите releaseResources по завершении работы со списком.
startAutoScroll(RecyclerView recyclerView, int itemsTotal) {...}

9) TODO комментарий. Добавил пример такого комментария в теле метода.

GoogleToken getGoogleSignInToken() {
    // TODO деоприотизировали очередь задач, будет реализовано в 2023 Q2.
}


10) Информативный комментарий. Добавил пояснительный комментарий к подключаемым библиотекам.

// библиотека для загрузки и кэширования изображений, гифок и видео.
// Docs: https://github.com/bumptech/glide
implementation 'com.github.bumptech.glide:glide:4.14.2'

11) Информативный комментарий. Добавил пояснительный комментарий к подключаемым библиотекам.

// Библиотека для проигрывания анимаций.
// Docs: http://airbnb.io/lottie/#/android
implementation 'com.airbnb.android:lottie:3.6.0'

12) Прояснение. Добавил комментарий, проясняющий логику форматтера.

/*
    Формируем список, который выглядит как группа секций Заголовок-элементы.
    Нам приходит сплошной список, из которого непонятно, что элементы принадлежат какой-то группе.
    Поэтому при форматировании держимся логики, что все элементы до следующего заголовка принадлежат одной секции.
*/
List<Section> format(items: List<NewsDto>) {...}

